/** * shield laading 插件 * version: 1.0.0 * Need Jquery or Zepto * author: yang.xu * date: 2016年12月27日 **/define(['app','jquery'], function (app,$) {    /**     * 构造函数     * @param element   插件本身     * @param settings  配置参数     * @constructor     */    var ShieldLoading = function(element, settings){        this.$element = $(element);        this.settings = $.extend({},ShieldLoading.DEFAULTS,settings);    };    ShieldLoading.DEFAULTS = {        container: null,        size: 'sm'    };    /**     * 加载插件当前绑定数据     */    ShieldLoading.prototype.render = function(){        var self = this;        var $this = self.$element;        var mySetting = self.settings;        //empty container content        $this.empty();        //default container is the document body        var $container = mySetting.container ? mySetting.container : $(document.body);        $this.addClass("shield-loading");        //compatible ie 6        if(!(navigator.userAgent.indexOf("MSIE 6.0") > 0)){            $this.append('<div class="shield-loading-backdrop"></div>')        }        var sizeClass = '';        switch(mySetting.size){            case 'lg':                sizeClass = 'shield-loading-lg';                break;            case 'md':                sizeClass = 'shield-loading-md';                break;            case 'sm':                sizeClass= 'shield-loading-sm';                break;            default :                sizeClass = 'shield-loading-sm';                break;        }        var $content = $('<div class="loadEffect ' + sizeClass + '"></div>');        for(var cnt=0; cnt < 8;cnt ++){            $content.append("<span></span>");        }        $this.append($content);        $container.append($this);        $this.show();    };    ShieldLoading.prototype.destory = function(){        var $this = this.$element;        $this.hide(0, function () {            $this.removeData('instance');            $this.remove();        })    };    ShieldLoading.prototype.close = function(){        this.destory();    };    $.fn.shieldLoading = function(method, settings){        var myArgs = Array.prototype.slice.call(arguments,1);        var obj = null;        return this.each(function(){            var $this= $(this);            if(!method){                obj = $this.data("instance");                if(!obj){                    $this.data("instance",(obj = new ShieldLoading(this,settings)));                    obj.render.apply(obj);                }            }else{                if(typeof method == 'string'){                    if(method != 'render'){                        obj = $this.data('instance');                        if (!obj) {                            $this.data('instance', (obj = new ShieldLoading(this, settings)));                            obj.render.apply(obj);                        }                        if(obj[method]){                            method = obj[method];                        }else{                            $.error("shieldLoading not exist method: " + method);                        }                        method.apply(obj,myArgs);                    }else{                        $this.data('instance', (obj = new ShieldLoading(this, settings)));                        obj.render.apply(obj);                    }                }else{                    $.error("the first param is not a string");                }            }        });    };    return ShieldLoading;});